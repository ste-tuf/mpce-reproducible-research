[
  {
    "objectID": "qmd/report_example.html",
    "href": "qmd/report_example.html",
    "title": "NHANES Report",
    "section": "",
    "text": "# Load packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/csz400/Documents/03_Teaching/2025_MPCE_Reproducible_Research\n\n# Loading the functions, \n# here() gets the location of the project\nsource(here(\"R/descriptive.R\"))\nsource(here(\"R/models.R\"))\nsource(here(\"R/gt_models.R\"))\n\n# Alternative is to use .. to refer to the project root\n# source(\"../R/descriptive.R\")\n# source(\"../R/models.R\")\n# source(\"../R/gt_models.R\")"
  },
  {
    "objectID": "qmd/report_example.html#descriptive-stats",
    "href": "qmd/report_example.html#descriptive-stats",
    "title": "NHANES Report",
    "section": "Descriptive stats",
    "text": "Descriptive stats\n\nload(here(\"data/nh2007.RData\"))\n\n# Descriptive stats\npurrr::map(.x = nh2007, .f = compute_descriptive_stats) |&gt;\n  dplyr::bind_rows(.id = \"column\")\n\n                   column         mean           sd       0%         25%\n1                      id 4.656261e+04 2966.3258794 41477.00 44060.75000\n2                  gender           NA           NA       NA          NA\n3                  gender           NA           NA       NA          NA\n4                  gender           NA           NA       NA          NA\n5           age_screening 4.741593e+01   19.2214951    16.00    31.00000\n6               education           NA           NA       NA          NA\n7               education           NA           NA       NA          NA\n8               education           NA           NA       NA          NA\n9               education           NA           NA       NA          NA\n10              education           NA           NA       NA          NA\n11              education           NA           NA       NA          NA\n12        education_child 1.283616e+01    9.2602059     8.00    10.00000\n13         marital_status 2.418417e+00    1.8024603     1.00     1.00000\n14             creatinine 1.264135e+02   79.7312853     8.00    65.00000\n15                   lead 8.322468e-01    1.5173860     0.07     0.32000\n16                 barium 2.193648e+00    3.9465255     0.08     0.69000\n17                cadmium 4.006332e-01    0.4691938     0.03     0.12925\n18                 asthma 1.866765e+00    0.3782668     1.00     2.00000\n19          heart_failure           NA           NA       NA          NA\n20          heart_failure           NA           NA       NA          NA\n21          heart_failure           NA           NA       NA          NA\n22 coronary_heart_disease           NA           NA       NA          NA\n23 coronary_heart_disease           NA           NA       NA          NA\n24 coronary_heart_disease           NA           NA       NA          NA\n25           heart_attack           NA           NA       NA          NA\n26           heart_attack           NA           NA       NA          NA\n27           heart_attack           NA           NA       NA          NA\n28                 stroke           NA           NA       NA          NA\n29                 stroke           NA           NA       NA          NA\n30                 stroke           NA           NA       NA          NA\n31     chronic_bronchitis           NA           NA       NA          NA\n32     chronic_bronchitis           NA           NA       NA          NA\n33     chronic_bronchitis           NA           NA       NA          NA\n34                 cancer           NA           NA       NA          NA\n35                 cancer           NA           NA       NA          NA\n36                 cancer           NA           NA       NA          NA\n          50%         75%     100% level Freq\n1  46513.0000 49178.75000 51622.00  &lt;NA&gt;   NA\n2          NA          NA       NA     1 1022\n3          NA          NA       NA     2 1012\n4          NA          NA       NA  &lt;NA&gt;    0\n5     47.0000    63.00000    80.00  &lt;NA&gt;   NA\n6          NA          NA       NA     1  266\n7          NA          NA       NA     2  327\n8          NA          NA       NA     3  453\n9          NA          NA       NA     4  473\n10         NA          NA       NA     5  338\n11         NA          NA       NA  &lt;NA&gt;  177\n12    11.0000    13.00000    66.00  &lt;NA&gt;   NA\n13     1.0000     4.00000     6.00  &lt;NA&gt;   NA\n14   114.0000   171.00000   528.00  &lt;NA&gt;   NA\n15     0.5700     0.95750    52.30  &lt;NA&gt;   NA\n16     1.3600     2.50000   101.00  &lt;NA&gt;   NA\n17     0.2545     0.49275     4.72  &lt;NA&gt;   NA\n18     2.0000     2.00000     9.00  &lt;NA&gt;   NA\n19         NA          NA       NA FALSE 1799\n20         NA          NA       NA  TRUE   58\n21         NA          NA       NA  &lt;NA&gt;  177\n22         NA          NA       NA FALSE 1794\n23         NA          NA       NA  TRUE   63\n24         NA          NA       NA  &lt;NA&gt;  177\n25         NA          NA       NA FALSE 1781\n26         NA          NA       NA  TRUE   76\n27         NA          NA       NA  &lt;NA&gt;  177\n28         NA          NA       NA FALSE 1782\n29         NA          NA       NA  TRUE   75\n30         NA          NA       NA  &lt;NA&gt;  177\n31         NA          NA       NA FALSE 1751\n32         NA          NA       NA  TRUE  106\n33         NA          NA       NA  &lt;NA&gt;  177\n34         NA          NA       NA FALSE 1684\n35         NA          NA       NA  TRUE  173\n36         NA          NA       NA  &lt;NA&gt;  177"
  },
  {
    "objectID": "qmd/report_example.html#models",
    "href": "qmd/report_example.html#models",
    "title": "NHANES Report",
    "section": "Models",
    "text": "Models\n\n# List outcomes\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\n\nmodels_parameters_nh2007 &lt;- tidyr::expand_grid(outcomes, exposures)\n\nmodels_nh2007 &lt;- map2(\n  .x = models_parameters_nh2007$outcomes,\n  .y = models_parameters_nh2007$exposures,\n  .f = \\(x, y) build_model(x, y, dataset = nh2007) # we need to change the dataset\n)\n\n# Extract model results\nmodels_results_nh2007 &lt;- map(models_nh2007, extract_model_result)\n\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\n\nresults_nh2007 &lt;- models_parameters_nh2007 |&gt;\n  dplyr::mutate(\n    models = models_nh2007,\n    models_results = models_results_nh2007\n  )\n\nresults_model_clean_nh2007 &lt;- results_nh2007 |&gt;\n  unnest(models_results) |&gt;\n  dplyr::filter(exposures == term) |&gt;\n  select(-models)\n\ngt_models(results_model_clean_nh2007)\n\n\n\n\n\n\n\nModels results\n\n\nexposures\nEstimate\nPr(&gt;|t|)\n95% CI\naic\n\n\n\n\nasthma\n\n\ncreatinine\n0.000\n0.13505\n0.000 - 0.000\n1802.2351\n\n\nlead\n0.002\n0.66801\n−0.008 - 0.013\n1804.2892\n\n\nbarium\n−0.003\n0.15283\n−0.007 - 0.001\n1802.4252\n\n\ncadmium\n0.001\n0.94783\n−0.035 - 0.037\n1804.4692\n\n\nheart_failure\n\n\ncreatinine\n0.000\n0.60937\n0.000 - 0.000\n-1270.1983\n\n\nlead\n−0.003\n0.29314\n−0.008 - 0.002\n-1271.0444\n\n\nbarium\n0.000\n0.61605\n−0.002 - 0.001\n-1270.1887\n\n\ncadmium\n0.002\n0.76814\n−0.014 - 0.019\n-1270.0237\n\n\ncoronary_heart_disease\n\n\ncreatinine\n0.000\n0.41578\n0.000 - 0.000\n-1147.8785\n\n\nlead\n−0.003\n0.24778\n−0.008 - 0.002\n-1148.5536\n\n\nbarium\n0.000\n0.69466\n−0.002 - 0.002\n-1147.3691\n\n\ncadmium\n0.014\n0.09495\n−0.003 - 0.031\n-1150.0099\n\n\nheart_attack\n\n\ncreatinine\n0.000\n0.92662\n0.000 - 0.000\n-809.6718\n\n\nlead\n−0.003\n0.29655\n−0.009 - 0.003\n-810.7556\n\n\nbarium\n−0.001\n0.35293\n−0.003 - 0.001\n-810.5283\n\n\ncadmium\n0.026\n0.00538\n0.008 - 0.045\n-817.4306"
  },
  {
    "objectID": "qmd/report_example.html#descriptive-stats-1",
    "href": "qmd/report_example.html#descriptive-stats-1",
    "title": "NHANES Report",
    "section": "Descriptive stats",
    "text": "Descriptive stats\n\nload(here(\"data/nh2009.RData\"))\n\n# Descriptive stats\npurrr::map(.x = nh2009, .f = compute_descriptive_stats) |&gt;\n  dplyr::bind_rows(.id = \"column\")\n\n                   column         mean          sd       0%       25%\n1                      id 5.685692e+04 3025.145830 51630.00 54224.750\n2                  gender           NA          NA       NA        NA\n3                  gender           NA          NA       NA        NA\n4                  gender           NA          NA       NA        NA\n5           age_screening 4.623440e+01   19.448558    16.00    30.000\n6               education           NA          NA       NA        NA\n7               education           NA          NA       NA        NA\n8               education           NA          NA       NA        NA\n9               education           NA          NA       NA        NA\n10              education           NA          NA       NA        NA\n11              education           NA          NA       NA        NA\n12              education           NA          NA       NA        NA\n13              education           NA          NA       NA        NA\n14        education_child 1.191556e+01    5.468006     8.00    10.000\n15         marital_status 2.491828e+00    1.829802     1.00     1.000\n16             creatinine 1.227959e+02   79.409829     7.00    62.750\n17                   lead 7.707041e-01    1.550689     0.07     0.290\n18                 barium 2.329029e+00    9.417887     0.08     0.680\n19                cadmium 3.791720e-01    0.494888     0.03     0.117\n20                 asthma 1.870766e+00    0.432992     1.00     2.000\n21          heart_failure           NA          NA       NA        NA\n22          heart_failure           NA          NA       NA        NA\n23          heart_failure           NA          NA       NA        NA\n24 coronary_heart_disease           NA          NA       NA        NA\n25 coronary_heart_disease           NA          NA       NA        NA\n26 coronary_heart_disease           NA          NA       NA        NA\n27           heart_attack           NA          NA       NA        NA\n28           heart_attack           NA          NA       NA        NA\n29           heart_attack           NA          NA       NA        NA\n30                 stroke           NA          NA       NA        NA\n31                 stroke           NA          NA       NA        NA\n32                 stroke           NA          NA       NA        NA\n33     chronic_bronchitis           NA          NA       NA        NA\n34     chronic_bronchitis           NA          NA       NA        NA\n35     chronic_bronchitis           NA          NA       NA        NA\n36                 cancer           NA          NA       NA        NA\n37                 cancer           NA          NA       NA        NA\n38                 cancer           NA          NA       NA        NA\n          50%        75%     100% level Freq\n1  56840.5000 5.9436e+04 62158.00  &lt;NA&gt;   NA\n2          NA         NA       NA     1 1097\n3          NA         NA       NA     2 1147\n4          NA         NA       NA  &lt;NA&gt;    0\n5     45.0000 6.2000e+01    80.00  &lt;NA&gt;   NA\n6          NA         NA       NA     1  239\n7          NA         NA       NA     2  333\n8          NA         NA       NA     3  469\n9          NA         NA       NA     4  592\n10         NA         NA       NA     5  384\n11         NA         NA       NA     7    1\n12         NA         NA       NA     9    1\n13         NA         NA       NA  &lt;NA&gt;  225\n14    11.0000 1.3000e+01    66.00  &lt;NA&gt;   NA\n15     1.0000 4.0000e+00     6.00  &lt;NA&gt;   NA\n16   108.0000 1.6600e+02   489.00  &lt;NA&gt;   NA\n17     0.5000 8.8000e-01    49.60  &lt;NA&gt;   NA\n18     1.3350 2.5300e+00   419.00  &lt;NA&gt;   NA\n19     0.2355 4.5225e-01     8.35  &lt;NA&gt;   NA\n20     2.0000 2.0000e+00     9.00  &lt;NA&gt;   NA\n21         NA         NA       NA FALSE 1970\n22         NA         NA       NA  TRUE   49\n23         NA         NA       NA  &lt;NA&gt;  225\n24         NA         NA       NA FALSE 1956\n25         NA         NA       NA  TRUE   63\n26         NA         NA       NA  &lt;NA&gt;  225\n27         NA         NA       NA FALSE 1945\n28         NA         NA       NA  TRUE   74\n29         NA         NA       NA  &lt;NA&gt;  225\n30         NA         NA       NA FALSE 1954\n31         NA         NA       NA  TRUE   65\n32         NA         NA       NA  &lt;NA&gt;  225\n33         NA         NA       NA FALSE 1918\n34         NA         NA       NA  TRUE  101\n35         NA         NA       NA  &lt;NA&gt;  225\n36         NA         NA       NA FALSE 1797\n37         NA         NA       NA  TRUE  222\n38         NA         NA       NA  &lt;NA&gt;  225"
  },
  {
    "objectID": "qmd/report_example.html#models-1",
    "href": "qmd/report_example.html#models-1",
    "title": "NHANES Report",
    "section": "Models",
    "text": "Models\n\n# List outcomes\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\n\nmodels_parameters_2009 &lt;- tidyr::expand_grid(outcomes, exposures)\n\nmodels_2009 &lt;- map2(\n  .x = models_parameters_2009$outcomes,\n  .y = models_parameters_2009$exposures,\n  .f = \\(x, y) build_model(x, y, dataset = nh2009) # we need to change the dataset\n)\n\n# Extract model results\nmodels_results_2009 &lt;- map(models_2009, extract_model_result)\n\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\nWaiting for profiling to be done...\n\nresults_2009 &lt;- models_parameters_2009 |&gt;\n  dplyr::mutate(\n    models = models_2009,\n    models_results = models_results_2009\n  )\n\nresults_model_clean_2009 &lt;- results_2009 |&gt;\n  unnest(models_results) |&gt;\n  dplyr::filter(exposures == term) |&gt;\n  select(-models)\n\ngt_models(results_model_clean_2009)\n\n\n\n\n\n\n\nModels results\n\n\nexposures\nEstimate\nPr(&gt;|t|)\n95% CI\naic\n\n\n\n\nasthma\n\n\ncreatinine\n0.000\n0.2371\n0.000 - 0.000\n2611.982\n\n\nlead\n0.004\n0.5313\n−0.008 - 0.015\n2612.990\n\n\nbarium\n−0.002\n0.0443\n−0.004 - 0.000\n2609.328\n\n\ncadmium\n−0.028\n0.1436\n−0.066 - 0.010\n2611.239\n\n\nheart_failure\n\n\ncreatinine\n0.000\n0.0639\n0.000 - 0.000\n-1891.887\n\n\nlead\n−0.004\n0.0466\n−0.008 - 0.000\n-1892.416\n\n\nbarium\n0.000\n0.4765\n−0.001 - 0.000\n-1888.955\n\n\ncadmium\n−0.008\n0.2510\n−0.021 - 0.005\n-1889.768\n\n\ncoronary_heart_disease\n\n\ncreatinine\n0.000\n0.1801\n0.000 - 0.000\n-1410.245\n\n\nlead\n−0.003\n0.2730\n−0.007 - 0.002\n-1409.649\n\n\nbarium\n0.000\n0.5532\n−0.001 - 0.001\n-1408.797\n\n\ncadmium\n−0.008\n0.3203\n−0.022 - 0.007\n-1409.435\n\n\nheart_attack\n\n\ncreatinine\n0.000\n0.1923\n0.000 - 0.000\n-1091.589\n\n\nlead\n−0.002\n0.4105\n−0.007 - 0.003\n-1090.564\n\n\nbarium\n0.000\n0.4657\n−0.001 - 0.001\n-1090.418\n\n\ncadmium\n−0.002\n0.8184\n−0.018 - 0.014\n-1089.938"
  },
  {
    "objectID": "content/03_slides_theory_2.html#plan",
    "href": "content/03_slides_theory_2.html#plan",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Plan",
    "text": "Plan\n\nFunctional programming with purrr\nReport generation with Quarto\nTable creation with gt\nBonus: Git branch and remote repo"
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\nFunctions can be easily applied to multiple elements using functional functions: special functions that uses another function as one of its arguments.\n\nPart of the tidyverse\nFocus on functional programming\nSimplify complex data manipulations\n\n\nThe purrr package is a part of the tidyverse suite of packages, which is designed to make data science easier and more consistent in R. purrr focuses on functional programming and helps simplify complex data manipulations, especially with lists and data frames."
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-1",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-1",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\n\nThe map family of functions: works by taking a vector (or list), applying a function to each of those items, and outputting the results from each function call."
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-2",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-2",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\n\npaste_text &lt;- function(x) { \n  paste(x, \"seconds have passed\")\n}\npurrr::map(1:3, paste_text)\n\n[[1]]\n[1] \"1 seconds have passed\"\n\n[[2]]\n[1] \"2 seconds have passed\"\n\n[[3]]\n[1] \"3 seconds have passed\"\n\n\n\nhttps://r-cubed-intermediate.rostools.org/sessions/functions\nThe name map() doesn’t mean a geographic map, it is the mathematical meaning of map: To use a function on each item in a set of items.\n\n\n\nmap(): Applies a function to each element of a list and returns a list\nmap_lgl(): Returns a logical vector\nmap_int(): Returns an integer vector\nmap_dbl(): Returns a double vector\nmap_chr(): Returns a character vector\nmap_df(): Applies a function to each element and returns a data frame"
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-3",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-3",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\nBenefits of Using purrr\n\nReduces redundancy\n\nWrite less code by avoiding repetitive loops\n\nIncreases code readability\n\nClear and concise syntax\n\nEasier to update and debug"
  },
  {
    "objectID": "content/03_slides_theory_2.html#dynamic-report-with-quarto",
    "href": "content/03_slides_theory_2.html#dynamic-report-with-quarto",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Dynamic Report with Quarto",
    "text": "Dynamic Report with Quarto\nWhat is Quarto?\n\nOpen-source scientific publishing system\nSupports R and Python\nIntegrates code, text, and outputs in one document (HTML, DOCX)\n\n\nQuarto by Allison Horst\n\nProduces HTML, PDF, Word documents, presentations, etc.\n\nBenefits:\n\nReproducible research\nAutomated reporting"
  },
  {
    "objectID": "content/03_slides_theory_2.html#quarto-document-structure",
    "href": "content/03_slides_theory_2.html#quarto-document-structure",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Quarto Document Structure",
    "text": "Quarto Document Structure\n---\ntitle: \"Descriptive Statistics Report\"\nauthor: \"Your Name\"\nformat: html # or docx \n---\n\nBlabla\n\n# Results\n  \n```{r}\nlibrary(purrr)\nnumeric_vars &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\ndescriptive_stats &lt;- map(numeric_vars, ~ compute_numeric(nh2007[[.x]]))\ndescriptive_stats\n```\n  \n\n\nYAML header defines document metadata.\nR code chunk for analysis.\nResults section for displaying outputs."
  },
  {
    "objectID": "content/03_slides_theory_2.html#markdown",
    "href": "content/03_slides_theory_2.html#markdown",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Markdown",
    "text": "Markdown\nText formatting:\n\n**bold**, _italic_,\n# Headers 1, ## Headers 2\n\nLists:\n\nUnordered lists with - or *\nOrdered lists with 1.\n\nR Code chunks:\n```{r}\nsummary(cars)\n```"
  },
  {
    "objectID": "content/03_slides_theory_2.html#table-creation-with-gt",
    "href": "content/03_slides_theory_2.html#table-creation-with-gt",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Table creation with gt",
    "text": "Table creation with gt\nCreate publication ready tables in R directly from your data.\nThere is many functions to style and format tables to match your needs:\n\nAutomatic number formating\nNice labels with special characters\nTable header spanner\nCells highlight\n\nTables can be exported in many format including html or MS Word."
  },
  {
    "objectID": "content/03_slides_theory_2.html#table-creation-with-gt-1",
    "href": "content/03_slides_theory_2.html#table-creation-with-gt-1",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Table creation with gt",
    "text": "Table creation with gt"
  },
  {
    "objectID": "content/03_slides_theory_2.html#bonus-git-branching",
    "href": "content/03_slides_theory_2.html#bonus-git-branching",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Bonus: Git branching",
    "text": "Bonus: Git branching\nBasic Git Workflow:\n\nCreate a branch (test new things): git branch new-branch-name\nSwitch to new branch: git checkout new-branch-name\nCommit changes: git add ., git commit -m \"message\"\nMerge branch: git checkout main, git merge new-branch-name\n\n\n\nIsolates development work\nAllows multiple features/bug fixes to be developed concurrently\nSimplifies collaboration and code review"
  },
  {
    "objectID": "content/03_slides_theory_2.html#bonus-git-local-and-remote",
    "href": "content/03_slides_theory_2.html#bonus-git-local-and-remote",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Bonus: Git local and remote",
    "text": "Bonus: Git local and remote"
  },
  {
    "objectID": "content/02_slides_theory_1.html#plan",
    "href": "content/02_slides_theory_1.html#plan",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Plan",
    "text": "Plan\n\nProject organisation\nR style guide\nGit\nIntroduction to functions"
  },
  {
    "objectID": "content/02_slides_theory_1.html#projects",
    "href": "content/02_slides_theory_1.html#projects",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Projects",
    "text": "Projects\nFor this workshop : a folder on your computer\nThere are many definitions of a project: it can be a single analysis for a paper or an entire cohort study with many papers.\nIn this workshop: a folder on your computer where we will analyse the NHANES data."
  },
  {
    "objectID": "content/02_slides_theory_1.html#projects-1",
    "href": "content/02_slides_theory_1.html#projects-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Projects",
    "text": "Projects\nRStudio natively support project oriented wrokflow.\nAdvantages:\n\nThe working directory is set by RStudio to the project folder.\nIt is easy to switch between projects from the drop-down menu.\n\n\n\nUsing RStudio projects"
  },
  {
    "objectID": "content/02_slides_theory_1.html#project-organisation",
    "href": "content/02_slides_theory_1.html#project-organisation",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Project organisation",
    "text": "Project organisation\nNot a single organization fits everybody’s needs, but being consistent throughout different projects or within a research group helps collaborating."
  },
  {
    "objectID": "content/02_slides_theory_1.html#directories",
    "href": "content/02_slides_theory_1.html#directories",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Directories",
    "text": "Directories\n\ndata/: Ready-to-analyze dataset, intermediate datasets.\ndata-raw/: Data from the outside world untouched. Can contain scripts to import data from the internet and prepare it.\nR/: R files containing functions. python/ for Python.\nscripts/ or code/: Scripts for things that need to be run once.\nqmd/, md/, Rmd/: Quarto and markdown documents."
  },
  {
    "objectID": "content/02_slides_theory_1.html#directories-1",
    "href": "content/02_slides_theory_1.html#directories-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Directories",
    "text": "Directories\n\noutput/: Folder with outputs, can contain images, graphs, or other stuff.\nfigs/: Folder with figures produced by your scripts.\nresults/: Results from the project, e.g., CSV tables.\ndocs/: Documentation or rendered documents.\nman/: Documentation for R packages.\nextra/: Extra, non-code, files.\n\n\nhttps://rfortherestofus.com/2021/08/rstudio-project-structure\nhttps://www.stat.ubc.ca/~jenny/STAT545A/block19_codeFormattingOrganization.html\nhttps://joshua.wilsonblack.nz/post/organising-r-projects/"
  },
  {
    "objectID": "content/02_slides_theory_1.html#files",
    "href": "content/02_slides_theory_1.html#files",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Files",
    "text": "Files\n\nREADME: Must-read file. At least one in the project directory, but can be added to any folder.\nLICENSE: License file for your project.\n.gitignore: List of files that Git should ignore."
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-files",
    "href": "content/02_slides_theory_1.html#naming-files",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming files",
    "text": "Naming files\nHuman and machine-readable.\n\nDates: YYYY-MM-DD (ISO format).\nEasy to order, use double digits.\nSeparate name elements to make them easy to subset with files functions.\nName should be regular expression friendly: avoid spaces, punctuation, accented characters, and case sensitivity."
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-files-1",
    "href": "content/02_slides_theory_1.html#naming-files-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming files",
    "text": "Naming files\nSome examples\n2024-04-01_air-pollution_PM25.csv \n2024-04-01_air-pollution_NO2.csv \n2021-04-01_air-pollution_PM25.csv \n2021-04-01_air-pollution_NO2.csv\nThis faciliate this kind of operations:\n\nfile.create(\"2024-04-01_air-pollution_PM25.csv\")\nfile.create(\"2024-04-01_air-pollution_NO2.csv\")\nfile.create(\"2021-04-01_air-pollution_PM25.csv\")\nfile.create(\"2021-04-01_air-pollution_NO2.csv\")\n\n# List files with both 2024 and PM in their name\nlist.files(pattern = \"2024*PM\")"
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-files-2",
    "href": "content/02_slides_theory_1.html#naming-files-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming files",
    "text": "Naming files\nMore examples\n\n\n# Bad\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nFilenames Use Spaces and Punctuation.xlsx\nfig 1.png\nFigure_02.png\nfigure 1.png\nfig 2.png\nJW7d^(2sl@deletethisandyourcareerisoverWx2*.txt\nmodel_first_try.R\nmyabstract.docx\nrun-first.r\ntemp.txt\n\n# Good\nother/2014-06-08_abstract-for-sla.docx\nother/filenames-are-getting-better.xlsx\n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nfig01_scatterplot-talk-length-vs-interest.png\nfig02_histogram-talk-attendance.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt\n\n\nhttps://r4ds.hadley.nz/workflow-scripts#saving-and-naming\nhttps://rstats.wtf/source-and-blank-slates"
  },
  {
    "objectID": "content/02_slides_theory_1.html#improve-r-code",
    "href": "content/02_slides_theory_1.html#improve-r-code",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Improve R code",
    "text": "Improve R code"
  },
  {
    "objectID": "content/02_slides_theory_1.html#style-guide",
    "href": "content/02_slides_theory_1.html#style-guide",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Style guide",
    "text": "Style guide\nWhy adopt a coding style:\n\nConsistency\nMakes code easier to write (fewer decisions when typing)\nEasier to read\n\n\n\n\n\n\n\nTip\n\n\nTidyverse style guide: https://style.tidyverse.org/"
  },
  {
    "objectID": "content/02_slides_theory_1.html#syntax",
    "href": "content/02_slides_theory_1.html#syntax",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Syntax",
    "text": "Syntax\n\nVariable and function names:\n\nOnly lowercase letters and numbers.\nUse _ to separate words within a name, e.g., day_one; day_1.\n\nSpace after a comma, e.g., mean(x, na.rm = TRUE).\nCurly braces, {}:\n\n{ should be the last character on the line.\nThe contents should be indented by two spaces.\n} should be the first character of the line."
  },
  {
    "objectID": "content/02_slides_theory_1.html#syntax-1",
    "href": "content/02_slides_theory_1.html#syntax-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Syntax",
    "text": "Syntax\nQuickly fix the syntax of your code using styler package:"
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-things",
    "href": "content/02_slides_theory_1.html#naming-things",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming things",
    "text": "Naming things\n\nAvoid changing common R functions or objects.\n\nT &lt;- FALSE\nc &lt;- \"true\"\nsum &lt;- function(x) mean(x)\n\nUse verbs for functions: do_something().\nNew line after a pipe (%&gt;% or |&gt;).\nPrefer using element names to retrieve object index instead of number indexing."
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-things-1",
    "href": "content/02_slides_theory_1.html#naming-things-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming things",
    "text": "Naming things\nBad:\n\niris[, c(2,4)]\nmod &lt;- lm(Sepal.Width ~ Petal.Width, data = iris)\nmod[[1]][2]\n\nBetter:\n\nmod$coefficients[names(mod$coefficients) == \"Petal.Width\"]\niris[, c(\"Sepal.Width\", \"Petal.Width\")]\niris[, grep(\"Width\", colnames(iris))]"
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-things-2",
    "href": "content/02_slides_theory_1.html#naming-things-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming things",
    "text": "Naming things\nComment as you code, provide as much detail as you can. Your future self will thank you.\n\n# Even better\n\n# Inspect iris data\niris[, grep(\"Width\", colnames(iris))]\n\n# Linear regression between sepal and petal width\nmod &lt;- lm(Sepal.Width ~ Petal.Width, data = iris)\n\n# Beta from the regression for petal width\n#   Low correlation\nmod$coefficients[names(mod$coefficient) == \"Petal.Width\"]"
  },
  {
    "objectID": "content/02_slides_theory_1.html#classic-version-control",
    "href": "content/02_slides_theory_1.html#classic-version-control",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Classic version control",
    "text": "Classic version control\n\n\nManual version control system, Luke W. Johnston"
  },
  {
    "objectID": "content/02_slides_theory_1.html#classic-version-control-1",
    "href": "content/02_slides_theory_1.html#classic-version-control-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Classic version control",
    "text": "Classic version control"
  },
  {
    "objectID": "content/02_slides_theory_1.html#git",
    "href": "content/02_slides_theory_1.html#git",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Git",
    "text": "Git\n\nKeeps track of every changes to a file.\nCan instantly restore any previous version of a file.\nAllows you to split your work into different branches for testing purposes.\nHandles merging files by comparing their modifications and resolving differences if any.\n\n\n\n\n\n\n\nImportant\n\n\nWith Git, you only need one version of your files!"
  },
  {
    "objectID": "content/02_slides_theory_1.html#which-files",
    "href": "content/02_slides_theory_1.html#which-files",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Which files",
    "text": "Which files\nGit can track text files:\n\nR Script\n.csv\nMarkup documents like Markdown, Quarto, or LaTeX files"
  },
  {
    "objectID": "content/02_slides_theory_1.html#terms-to-know",
    "href": "content/02_slides_theory_1.html#terms-to-know",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Terms to know",
    "text": "Terms to know\n\n\n\n\n\n%%{init:{'themeCSS': \".actor {stroke: DarkBlue;fill: White;stroke-width:1.5px;}\", 'sequence':{'mirrorActors': false}}}%%\n\nsequenceDiagram\n\n    participant W as Working folder\n\n    participant S as Staged\n\n    participant H as History\n\n    W-&gt;&gt;S: Add\n\n    S-&gt;&gt;H: Commit\n\n\n\n\n\n\n\n\nrepository, repo: a folder tracked by git.\nworking folder: files not tracked by Git, or contain new modification not saved yet.\nadd: add files or modifications to the staged areas,\ncommit: create a snapshot of changes and save it in Git history. Commits must have a short description."
  },
  {
    "objectID": "content/02_slides_theory_1.html#terms-to-know-1",
    "href": "content/02_slides_theory_1.html#terms-to-know-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Terms to know",
    "text": "Terms to know\n\n\n\n\n\n%%{init:{'themeCSS': \".actor {stroke: DarkBlue;fill: White;stroke-width:1.5px;}\", 'sequence':{'mirrorActors': false}}}%%\n\nsequenceDiagram\n\n    participant W as Working folder\n\n    participant S as Staged\n\n    participant H as History\n\n    W-&gt;&gt;S: Add\n\n    S-&gt;&gt;H: Commit\n\n\n\n\n\n\n\n\nstage: Files and modification here are tracked by Git and can be put into the history with a commit. They still can be lost (unsafe).\nhistory: all the changes that have been commited. Everything that has been commited in the Git history will never be completely gone (safe)."
  },
  {
    "objectID": "content/02_slides_theory_1.html#terms-to-know-2",
    "href": "content/02_slides_theory_1.html#terms-to-know-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Terms to know",
    "text": "Terms to know\nBranches and repository:\n\nlocal: refer to the repository that you store on your computer. We only work locally today.\nremote: refer to repository stored online like in GitHub.\nbranch: branches are parallel versions of your project. They allow you to experiment things without affecting the main project until you’re ready to merge them back.\nmerge: merging is the process of integrating changes from one branch into another. It combines the histories of both branches, creating a single, unified history."
  },
  {
    "objectID": "content/02_slides_theory_1.html#functions",
    "href": "content/02_slides_theory_1.html#functions",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Functions",
    "text": "Functions\n\nWhy write functions?\n\n\nDRY - Don’t Repeat Yourself\n\nCreate functions for actions that are often repeated:\n\nImport datasets\nCreate models\nExtract results from models\nCreate tables"
  },
  {
    "objectID": "content/02_slides_theory_1.html#functions-1",
    "href": "content/02_slides_theory_1.html#functions-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Functions",
    "text": "Functions\n\n\n\n\n\n\nImportant\n\n\nA function is a bundled sequence of steps that achieve a specific action.\n\n\n\nFor example, + (sum) is a function, mean() is a function …\nFunctions are made of a function call, arguments, and the function body:\nmyfunction &lt;- function(argument1, argument2){ \n  # body of function with R code\n}\n\n\n\n\n\n\nTip\n\n\nType sd in R (without parenthesis) to see how sd() calculate standard deviation"
  },
  {
    "objectID": "content/02_slides_theory_1.html#functions-2",
    "href": "content/02_slides_theory_1.html#functions-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Functions",
    "text": "Functions\n\nThe output of the function depends only on the inputs. Identical inputs will give identical results.\nFunctions can replace loops and make your code much clearer.\nFunctions are easier to share between projects and can be gathered in a package."
  },
  {
    "objectID": "content/01_slides_intro.html#section",
    "href": "content/01_slides_intro.html#section",
    "title": "Introduction",
    "section": "",
    "text": "https://xkcd.com/2298"
  },
  {
    "objectID": "content/01_slides_intro.html#section-1",
    "href": "content/01_slides_intro.html#section-1",
    "title": "Introduction",
    "section": "❔",
    "text": "❔\nHow many of you have read a method in a paper and wondered how they actually did it?\nHave you ever received confusing code? Or maybe written your own confusing code?\n… or about open access, open data, open methods/protocols, or open source?"
  },
  {
    "objectID": "content/01_slides_intro.html#reproducibility",
    "href": "content/01_slides_intro.html#reproducibility",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nReproducibility\n\nObtain consistent results using the same data and code as the original study.\n\nReplicability\n\nObtain consistent results across studies aimed at answering the same scientific question using new data or other new computational methods.\n\n\n\nNational Academies of Sciences (2019)\n\n\nUnreplicability can be useful to science and help build knowledge.\n\nDomain of study\nComplex / unknown systems\nResearchers choices:\n\nStudy design\nMistakes\nMisconduct\nPoor reporting and publication bias\n\n\nSource of not useful non-replication:\n\npublication bias\nmisaligned incentives\ninappropriate statistical inference\npoor study design\nerrors\nincomplete reporting of a study"
  },
  {
    "objectID": "content/01_slides_intro.html#reproducibility-1",
    "href": "content/01_slides_intro.html#reproducibility-1",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility\nRelated to data collection, computation, and analysis:\n\nData acquisition\nData management\nAnalysis\nReporting results\n\n\n\n\n\n\n\nImportant\n\n\nAlmost all the steps of an epidemiology study can be involved!"
  },
  {
    "objectID": "content/01_slides_intro.html#reproducibility-2",
    "href": "content/01_slides_intro.html#reproducibility-2",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility\n\n\nPeng (2011)"
  },
  {
    "objectID": "content/01_slides_intro.html#workshop-organization",
    "href": "content/01_slides_intro.html#workshop-organization",
    "title": "Introduction",
    "section": "Workshop organization",
    "text": "Workshop organization\nA little bit of theory and lots of hands-on exercises. Each part of the workshop has a dedicated page where you can find slides and instructions to follow in your breakout rooms.\n\nIntroduction (20 minutes): a little bit of theory\nHands-on Activity 1: a simple reproducible project (40 minutes)\nBreak (15 minutes)\nHands-on Activity 2: create a nice report (50 minutes)\nClosing Remarks and Q&A (15 minutes)"
  },
  {
    "objectID": "content/01_slides_intro.html#getting-help",
    "href": "content/01_slides_intro.html#getting-help",
    "title": "Introduction",
    "section": "Getting help",
    "text": "Getting help\n\nMaybe your teammates can help\nPut a comment in the chat if you are strugling\nNo stupid questions—we’re all learning here, including me\n\nBe open-minded\nBe supportive\nBe inclusive"
  },
  {
    "objectID": "content/01_slides_intro.html#lets-form-teams-of-3",
    "href": "content/01_slides_intro.html#lets-form-teams-of-3",
    "title": "Introduction",
    "section": "Let’s form teams of 3",
    "text": "Let’s form teams of 3\n\nHave you ever created and used custom functions in R?\nDo you ever have use map functions from purrr package?\nHave you ever created a report using RMarkdown, Quarto or Jupyter notebook?\n\nIf you answered “No” to all three questions: Beginner\nIf you answered “Yes” to one or two questions: Intermediate\nIf you answered “Yes” to all three questions: Advanced\n\nLet’s mix things up and get to know each other! We’ll form teams of 3 with varying levels of R experience."
  },
  {
    "objectID": "content/01_slides_intro.html#references",
    "href": "content/01_slides_intro.html#references",
    "title": "Introduction",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\n\nNational Academies of Sciences, Engineering, and Medicine. 2019. Reproducibility and Replicability in Science. Washington, DC: The National Academies Press. https://doi.org/10.17226/25303.\n\n\nPeng, Roger D. 2011. “Reproducible Research in Computational Science.” Science 334 (6060): 1226–27. https://doi.org/10.1126/science.1213847."
  },
  {
    "objectID": "content/00_pre-ws.html",
    "href": "content/00_pre-ws.html",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Windows: Download the R installer from the CRAN website. Follow the installation instructions.\nMac: Download the R installer from the CRAN website. Follow the installation procedure.\nLinux: R is typically available through the package manager of your Linux distribution. On Ubuntu you can use the following command in your terminal:\n sudo apt-get install r-base r-base-dev # Optional but recommended\nFor help during the installation, refer to the R Installation and Administration documentation.\n\n\n\n\nDownload the RStudio installer from the RStudio Download page. Choose the appropriate version for your operating system and follow the installation instructions provided.\nFor alternative IDEs like Visual Studio Code, download and install according to your preferences.\n\n\n\n\n\n\nWindows: Download the Git installer from the Git Downloads website. Follow the installation instructions provided. Ensure that the Git GUI component is selected during installation.\nMac: Download the installer from the Git Downloads page and follow the installation instructions.\nLinux: Install Git using your package manager. On Ubuntu, use the following command:\nsudo apt-get install git git-gui\n\nFor detailed installation instructions, refer to the Git Installation documentation.\n\n\n\nGit can be use directly as a command line program directly from a terminal. This is usefull to automate stuff but not that user friendly. Therefore many software profice a nice graphic interfacte to manage and vizualise your git repository.\nOn Windows git-gui, the default GUI, can be installed at the same time as git. RStudio, VSCode also have a pane dedicated to Git which doesn’t need any installation.\nFor this workshop, we will use Git-nuro, a free and open-source GUT which is available on any OS. Go to this page https://gitnuro.com/, download and install it.\n\n\n\n\n\n\nTip\n\n\n\nNote: Make sure that at least one GUI software is installed and working before the workshop."
  },
  {
    "objectID": "content/00_pre-ws.html#r-version-4.3.0-or-later",
    "href": "content/00_pre-ws.html#r-version-4.3.0-or-later",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Windows: Download the R installer from the CRAN website. Follow the installation instructions.\nMac: Download the R installer from the CRAN website. Follow the installation procedure.\nLinux: R is typically available through the package manager of your Linux distribution. On Ubuntu you can use the following command in your terminal:\n sudo apt-get install r-base r-base-dev # Optional but recommended\nFor help during the installation, refer to the R Installation and Administration documentation."
  },
  {
    "objectID": "content/00_pre-ws.html#rstudio-version-2023.03-or-later---windows-mac-linux",
    "href": "content/00_pre-ws.html#rstudio-version-2023.03-or-later---windows-mac-linux",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Download the RStudio installer from the RStudio Download page. Choose the appropriate version for your operating system and follow the installation instructions provided.\nFor alternative IDEs like Visual Studio Code, download and install according to your preferences."
  },
  {
    "objectID": "content/00_pre-ws.html#git-and-git-gui-version-2.40.0",
    "href": "content/00_pre-ws.html#git-and-git-gui-version-2.40.0",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Windows: Download the Git installer from the Git Downloads website. Follow the installation instructions provided. Ensure that the Git GUI component is selected during installation.\nMac: Download the installer from the Git Downloads page and follow the installation instructions.\nLinux: Install Git using your package manager. On Ubuntu, use the following command:\nsudo apt-get install git git-gui\n\nFor detailed installation instructions, refer to the Git Installation documentation.\n\n\n\nGit can be use directly as a command line program directly from a terminal. This is usefull to automate stuff but not that user friendly. Therefore many software profice a nice graphic interfacte to manage and vizualise your git repository.\nOn Windows git-gui, the default GUI, can be installed at the same time as git. RStudio, VSCode also have a pane dedicated to Git which doesn’t need any installation.\nFor this workshop, we will use Git-nuro, a free and open-source GUT which is available on any OS. Go to this page https://gitnuro.com/, download and install it.\n\n\n\n\n\n\nTip\n\n\n\nNote: Make sure that at least one GUI software is installed and working before the workshop."
  },
  {
    "objectID": "content/01_intro.html",
    "href": "content/01_intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Slides\n\n\n\n\n\nGeneral context\nThe ultimate aim of this workshop is to give you the key to make data analysis projects tha:\n\nare self-contained (within a single folder)\nhave a record of changes made to the files with git\nmake it easier to collaborate with other people\nconnect analysis and scientific output like a paper\nare more reproducible (or at least easier to review).\n\nThis is will:\n\nimprove transparency of your reseach projects\nmake it easier to share both with your research team but also public, funding agency and other researcher\nfacilitate the assessment of the quality of your work including peer review."
  },
  {
    "objectID": "content/02_exercise_1.html#initialize-git-repository",
    "href": "content/02_exercise_1.html#initialize-git-repository",
    "title": "Hands-on Activity 1",
    "section": "Initialize git repository",
    "text": "Initialize git repository\nTo do that, we will use Gitnuro (see preworkshop instructions). Open Gitnuro, click on Start a local repository and select the folder you just created above.\n\nThis will open the main widow where we can mange the git repository. The window shoul look like that:\n\n\n\n\n\nThe interface is divided in several parts:\n\nthe main area which show two things:\n\n\nthe history of the repository comit\nthe content of a selected file with it’s modifications\n\n\nThe staged ares which list the files in the staged area and ready to commit\nThe unstaged area show the files in your working folder and unstaged\nThe comit message where you have tot entre the comit message before commiting (saving) the staged files\n\nWe can keep this windows open and we will return to it as we advance throught the workshop and need to commit (save) modifcations.\nBefore adding things, it’s a god idea to configure you credentials (especially if you are working within a team). Click on the bottom left to display the credential windows:\n\n\n\n\n\nHere you can setup your User Name and Email both for the curent project (Repository) or for all git projects (Global).\n\n\n\n\n\n\nTip\n\n\n\nYou can also initialize a git repository directly when creating a new R Studio project."
  },
  {
    "objectID": "content/02_exercise_1.html#create-a-rstudio-project",
    "href": "content/02_exercise_1.html#create-a-rstudio-project",
    "title": "Hands-on Activity 1",
    "section": "Create a Rstudio project",
    "text": "Create a Rstudio project\nNow let’s open RStudio to also initiate a Rproject. Click on “New project” in the project menu on the top right corner. Then select “Project in existing directory” and indicate the path of the workshop folder. The project should open itself.\nEach RStudio project can be configured. You can either click on the .Rproj file within RStudio or click on “Project option” in the “Tools” menu.\nIt’s usally better to turn off the saving of the workspace to .Rdata as this prevent old data from previous computations to be loaded automatically each time you open the project which can cause a lot of issues. It’s always better to rerun the scripts form scratch."
  },
  {
    "objectID": "content/02_exercise_1.html#adding-folder-and-files",
    "href": "content/02_exercise_1.html#adding-folder-and-files",
    "title": "Hands-on Activity 1",
    "section": "Adding folder and files",
    "text": "Adding folder and files\nNow that we have setup both Git and RStudio, let’s organise the project by creating folders and files within the project folder.\n\nFolders:\n\ndata/: copy the two datasets nh2007 and nh2009 here\nR/: keep the folder empty for now\nscripts/: copy starting_script.R here\n\nFiles:\n\nREADME.md: create it at the root ot the project folder. You can open it in R Studio and add a very short description of the project.\n\nscripts/README.md, optional to add some information on the script we can find in this folder\n\n.gitignore: create this file at the root of the project folder. It can contain a list of files that git should ignore. Open it in RStudio and add the following lines:\n\n\n# History files\n.Rhistory\n.Rapp.history\n\n# Session Data files\n.RData\n.RDataTmp\n\n# User-specific files\n.Ruserdata\n\n# RStudio files\n.Rproj.user/\n\n# R Environment Variables\n.Renviron\n\n# R Specific file \n*.Rdata \nThis will prevent git from following the modification of these files that are only temporary and not related to the analysis.\nThe folder should look like that:\nProject\n├── .git/ &lt;-- Git repository stored here (eg data about changes), hidden folder\n├── R/\n├── data/\n|   ├──  nh2007.Rdata\n|   └──   nh2009.Rdata\nscripts/\n|   ├──starting_script.R\n|   └──  README.md\n├── .gitignore \n├── Project.Rproj\n└── README.md\n\nAll the steps above can be done within the command line or terminal, using git command line namely Git Bash.\ncd your_project_folder\ngit init\n\n# GIT bash\ngit config --global user.name \"First Last\"\ngit config --global user.email \"first.last@example.com"
  },
  {
    "objectID": "content/02_exercise_1.html#loading-the-data",
    "href": "content/02_exercise_1.html#loading-the-data",
    "title": "Hands-on Activity 1",
    "section": "Loading the data",
    "text": "Loading the data\nIt’s time to look at the analysis script. You can try to make it run as it is.\nThe first 3 lines look like that:\n\nlibrary(tidyverse)\n\nsetwd(\"C:/folder/nhanes-analysis/\")\nnh2007 &lt;- load(\"C:/folder/nhanes-analysis/nh2007.Rdata\")\n\n\n\n\n\n\n\nExercice\n\n\n\nExercice: Can you spot the issue there? How can we improve the loading of the data within the project directory?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSince we have setup RStudio and we are working within a project and the working directory is the project folder. Therefore we can just specify the path to load the data as a relative pathe (e.g. path within the project):\n\nload(\"data/nh2007.Rdata\")\n\nThis will work on any computer with the same project sturcture. Relative paths can also used for any files, including to source R scripts."
  },
  {
    "objectID": "content/02_exercise_1.html#script-style",
    "href": "content/02_exercise_1.html#script-style",
    "title": "Hands-on Activity 1",
    "section": "Script style",
    "text": "Script style\n\n\n\n\n\n\nExercice\n\n\n\nQuestion: What can you notice regarding the coding style used in the script?\n\nIs it consistent?\nDoes it match the tidyverse style guidelines?\n\n\n\n\n# ...\nnh2007$id&lt;-factor(nh2007$id)\nnh2007$gender&lt;-factor(nh2007$gender)\n# ...\nnh2007$asthma&lt;- nh2007$asthma%in%1\nnh2007$cancer&lt;-nh2007$cancer%in%1\nnh2007$cancer &lt;- nh2007$cancer %in% 1\n# ....\nmodel.1a &lt;- glm(asthma ~ barium + age_screening + gender,data=nh2007)\nmodel.1.b &lt;- glm(heart_failure ~ barium +age_screening+gender, data = nh2007)\nmodel.1.c&lt;-glm(coronary_heart_disease ~barium + age_screening + gender,data=nh2007)\nlead2a &lt;- glm(asthma~lead + age_screening + gender, data = nh2007)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe can notice:\n\nInconsistent spacing in the formulas\nVariations in the names of the models\nGeneral lack of comments\nA lot of copy pasting to repeat the same actions for many variables\n\n\n\n\nFirst, we can use styler Rstudio addin to reformat the whole code. Look for the Addins menu in Rstudio toolbar and search for styler addon. Click on Style active file:\n\n\n\n\n\nThe code will look much better:\n\n# ...\nnh2007$id &lt;- factor(nh2007$id)\nnh2007$gender &lt;- factor(nh2007$gender)\n# ...\nnh2007$asthma &lt;- nh2007$asthma %in% 1\nnh2007$heart_failure &lt;- nh2007$heart_failure %in% 1\nnh2007$coronary_heart_disease &lt;- nh2007$coronary_heart_disease %in% 1\nnh2007$heart_attack &lt;- nh2007$heart_attack %in% 1\nnh2007$stroke &lt;- nh2007$stroke %in% 1\nnh2007$chronic_bronchitis &lt;- nh2007$chronic_bronchitis %in% 1\nnh2007$cancer &lt;- nh2007$cancer %in% 1\n# ....\nmodel.1a &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007)\nmodel.1.b &lt;- glm(heart_failure ~ barium + age_screening + gender, data = nh2007)\nmodel.1.c &lt;- glm(coronary_heart_disease ~ barium + age_screening + gender, data = nh2007)\nlead2a &lt;- glm(asthma ~ lead + age_screening + gender, data = nh2007)\n\nWe can further change the models names to make them more consitent and informative:\n\nmodel_barium_asthma &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007)\nmodel_barium_hf &lt;- glm(heart_failure ~ barium + age_screening + gender, data = nh2007)\nmodel_barium_chd &lt;- glm(coronary_heart_disease ~ barium + age_screening + gender, data = nh2007)\nmodel_lead_asthma &lt;- glm(asthma ~ lead + age_screening + gender, data = nh2007)\n\nThis steps is actually optionnal as we will see how to avoid this in the second activity. Now the script should work and is a cleaner. Instead of saving the script as a new one we can save the modifications in git: let’s do a second comit!\n\n\n\n\n\nFirst save the script, then switch to Gitnuro window: starting_script.r should appear as unstaged file and you can see the modification you just made to the file by clicking on it. If you like the modifications, you can add the modified script to the staged area (see You first commit). Add a commit message like “Apply tidyverse style guide” and commit. In the history you will see that you second commit has been added on top of the first one.\nNotice that if you right click on the first commit you have many options like: navigate in your history, change the copy of the files you are working on, revert change, etc. This is outside of the topic of this workshop, but you can read more about it on the following page: https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things"
  },
  {
    "objectID": "content/02_exercise_1.html#extending-functions",
    "href": "content/02_exercise_1.html#extending-functions",
    "title": "Hands-on Activity 1",
    "section": "Extending functions",
    "text": "Extending functions\nIs quite easy to modify the functions we created an to add fucntion to do more sutff! For example, we can for each variable, create plots to describe the distribution of them using ggplot2.\nThis new function create plots for each type of variable: a histogram for the numeric variables and a barplot for the discrete variables.\n\n# Descriptive univariate graphs\ncompute_descriptive_graph &lt;- function(variable) {\n  # Histogram\n  if (is.numeric(variable)) {\n    p &lt;- ggplot2::ggplot(mapping = aes(x = variable)) +\n      ggplot2::geom_histogram()\n  }\n  \n  # Barplot\n  if (is.factor(variable) || is.logical(variable)) {\n    p &lt;- ggplot2::ggplot(mapping = aes(x = variable)) +\n      ggplot2::geom_bar()\n  }\n\n  p\n}\n\n# Test the function\ncompute_descriptive_graph(nh2007$creatinine)\ncompute_descriptive_graph(nh2007$lead)\ncompute_descriptive_graph(nh2007$barium)\ncompute_descriptive_graph(nh2007$cadmium)\n\nThe little p is needed at the end of the function to return the graph. If you remove it you will see that nothing will be return. This is because a function return the last output from it’s body.\nYou can add this function the starting script, and also update the lines 72-75:\n\nhist(nh2007$creatinine)\nhist(nh2007$lead)\nhist(nh2007$barium)\nhist(nh2007$cadmium)\n\n# Replace by\n\ncompute_descriptive_graph(nh2007$creatinine)\ncompute_descriptive_graph(nh2007$lead)\ncompute_descriptive_graph(nh2007$barium)\ncompute_descriptive_graph(nh2007$cadmium)\n\n\n\n\n\n\n\nExercice\n\n\n\nOptionnal exercise: create a new descriptive statistics function that includes at least one additional calculation not covered previously."
  },
  {
    "objectID": "content/03_exercise_2.html#first-use-of-map",
    "href": "content/03_exercise_2.html#first-use-of-map",
    "title": "Hands-on Activity 2",
    "section": "First use of map()",
    "text": "First use of map()\nLet’s look at the script that we finished before the break. We created some functions that we now use for all the descriptive statistics. However, we still have to copy and paste the same line many times.\n\n# Numbers\ncompute_descriptive_stats(nh2007$gender)\ncompute_descriptive_stats(nh2007$education)\ncompute_descriptive_stats(nh2007$education_child)\ncompute_descriptive_stats(nh2007$asthma)\ncompute_descriptive_stats(nh2007$heart_failure)\ncompute_descriptive_stats(nh2007$coronary_heart_disease)\ncompute_descriptive_stats(nh2007$creatinine)\ncompute_descriptive_stats(nh2007$lead)\ncompute_descriptive_stats(nh2007$barium)\ncompute_descriptive_stats(nh2007$cadmium)\n\n\n# Graph\ncompute_descriptive_graph(nh2007$creatinine)\ncompute_descriptive_graph(nh2007$lead)\ncompute_descriptive_graph(nh2007$barium)\ncompute_descriptive_graph(nh2007$cadmium)\n\n\n\n\n\n\n\nExercice\n\n\n\nExercice: Try to to use map(), from the purrr:: package, to avoid copy pasting?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmap() can take a data frame as its first argument .x and it will apply the function to each column of the data frame:\n\npurrr::map(.x = nh2007, .f = compute_descriptive_stats)\n\nThis will output a list which look like this:\nIf we replace the .f argument by another function, like compute_numeric() or compute_descriptive_graph() this will work but, only if the column is of the right type. The following will fail, as mean cannot be calculated for categorical variables:\n\npurrr::map(.x = nh2007, .f = compute_numeric)\n\nTo make it work, we need to restrict to a subset of columns using dplyr::select():\n\nnh2007 |&gt;\n  # Retrict to numeric variables\n  dplyr::select(dplyr::where(fn = is.numeric)) |&gt;\n  purrr::map(.f = compute_numeric)\n\nnh2007 |&gt;\n  # Restrict to variables of interest for graphs\n  dplyr::select(creatinine, lead, barium, cadmium) |&gt;\n  purrr::map(.f = compute_descriptive_graph)\n\n\n\n\nThe list that map() return are not so easy to work with because functions are mainly build to use a dataframe. However it’s very easy to modify compute_table() and compute_numeric() to return the results in a different format.\nWhen the two functions return a dataframe, it’s will be possible to use dplyr::bind_rows() to bind all the elements of the list from map into a single dataframe.\nLet’s modify the two compute functions:\n\ncompute_table &lt;- function(variable) {\n  # Return frequency table as a dataframe\n  table(variable, useNA = \"always\", dnn = \"level\") |&gt;\n    as.data.frame() \n}\n\ncompute_numeric &lt;- function(variable) {\n  mean_value &lt;- mean(variable, na.rm = TRUE)\n  sd_value &lt;- sd(variable, na.rm = TRUE)\n  quantiles &lt;- quantile(variable, na.rm = TRUE)\n\n  # Return statistics as a dataframe\n  cbind(\n    data.frame(\n      \"mean\" = mean_value,\n      \"sd\" = sd_value\n    ),\n    t(quantiles)\n  )\n}\n\nSave the function file, and source it to load the updated version of the function into our environment. Then we can try the following lines and combine map() results with bind_rows():\n\npurrr::map(.x = nh2007, .f = compute_descriptive_stats) |&gt;\n  dplyr::bind_rows(.id = \"column\") |&gt;\n  head(5)\n\n         column        mean        sd    0%      25%   50%      75%  100% level\n1            id 46562.61406 2966.3259 41477 44060.75 46513 49178.75 51622  &lt;NA&gt;\n2        gender          NA        NA    NA       NA    NA       NA    NA     1\n3        gender          NA        NA    NA       NA    NA       NA    NA     2\n4        gender          NA        NA    NA       NA    NA       NA    NA  &lt;NA&gt;\n5 age_screening    47.41593   19.2215    16    31.00    47    63.00    80  &lt;NA&gt;\n  Freq\n1   NA\n2 1022\n3 1012\n4    0\n5   NA\n\n\nThe result is already much better and easier to work with. Notice that we didn’t had to change the compute_descriptive_stats() function, only the computation functions, compute_table() and compute_numeric(). This is because no calculations are happening in compute_descriptive_stats(), it is only calling the appropriate compute function for each type of variable.\n\n\n\n\n\n\nTip\n\n\n\nWe have done some modification to our function it’s a good idea to commit the changes so you can revert to the previous version of the function if needed.\nJump back in Gitnuro, verify the modifications you just introduce, stage them, find a good name for the commit and press the commit button 😊"
  },
  {
    "objectID": "content/03_exercise_2.html#create-models-with-map",
    "href": "content/03_exercise_2.html#create-models-with-map",
    "title": "Hands-on Activity 2",
    "section": "Create models with map()",
    "text": "Create models with map()\nWe can also use functional programming to simplify the creation of the models. For the 4 outcomes and the 4 exposures, the models are always the same:\n\n# Creatinine\nmodel.1a &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007)\nmodel.1.b &lt;- glm(heart_failure ~ barium + age_screening + gender, data = nh2007)\nmodel.1.c &lt;- glm(coronary_heart_disease ~ barium + age_screening + gender, data = nh2007)\nmodel.1.d &lt;- glm(heart_attack ~ barium + age_screening + gender, data = nh2007)\nmodel.1.e &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007) # Notice that this model is identical to 1a, but it's hard to notice\n\nWe can create a new function! This function need to have at least 2 arugments: one argument for the outcome and another for the exposure. It’s also a good idea to add another argument to specify the dataset to use in the model. The function can look like that .\nmap2() and pmap() are variant of map() that can iterate over two or many arguments simultaneously.\nAll the functions that we will create for the models can be saved in a new file R/models.R. This will help to quickly find functions based on their type when we need to modify them. Remember to add a line to source this file in the starting script.\n\n\n\n\n\n\nExercice\n\n\n\nExercise: Create a function to build the glm models. Use map2() to apply the function to all combinations of outcomes and exposures. Here as some usefull pieces of code that you can use:\nBy looking at the code, we can see that the outcomes and exposures are the following one:\n\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\nWe can create a formula using paste() and as.formula():\n\nformula &lt;- paste0(\"asthma\", \" ~ \", \"creatinine\", \" + age_screening + gender\" ) |&gt;\n    as.formula()\n\nformula\n\nasthma ~ creatinine + age_screening + gender\n\n\ntidyr::expand_grid() creates a table from combinations of vectors. You can use it to get all the combinations of outcomes and exposures.\n\ntidyr::expand_grid(outcomes, exposures)\n\n# A tibble: 16 × 2\n   outcomes               exposures \n   &lt;chr&gt;                  &lt;chr&gt;     \n 1 asthma                 creatinine\n 2 asthma                 lead      \n 3 asthma                 barium    \n 4 asthma                 cadmium   \n 5 heart_failure          creatinine\n 6 heart_failure          lead      \n 7 heart_failure          barium    \n 8 heart_failure          cadmium   \n 9 coronary_heart_disease creatinine\n10 coronary_heart_disease lead      \n11 coronary_heart_disease barium    \n12 coronary_heart_disease cadmium   \n13 heart_attack           creatinine\n14 heart_attack           lead      \n15 heart_attack           barium    \n16 heart_attack           cadmium   \n\n\nWith these three things, you can create a table containing the combination of outcomes and exposures and create a function that take every row of the table to build all the models from it.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nbuild_model &lt;- function(outcome, exposure, dataset) {\n  formula &lt;- paste0(\n    outcome, \" ~ \",\n    exposure, \" + age_screening + gender\"\n  ) |&gt;\n    as.formula()\n\n  try(\n    glm(formula, data = dataset)\n  )\n}\n\n# List outcomes\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\n\nmodels_parameters &lt;- tidyr::expand_grid(outcomes, exposures)\n\nmodels &lt;- map2(\n  .x = models_parameters$outcomes,\n  .y = models_parameters$exposures,\n  .f = function(x, y) build_model(x, y, dataset = nh2007)\n)\n\n\ntry() is used to catch any errors when the models don’t run for any reason. This allows map to continue instead of stopping.\n.f = function(x, y) build_model(x, y, dataset = nh2007) is a anonymous function. It helps pass a common element to all the models. Here, it’s the dataset that we want to use for the models. Of course, this dataset can also be passed firectly by pmap to make the dataset vary, or written in the build model function, but it can be a little tricky.\n\n\n\n\nOnce again, all the models are in a list. It’s easy to access a model using indexes like models[[1]], but it’s a bit crude. It is possible to improve that by:\n\nAssigning names to each list element from the model parameters, so you can access models using a $ sign.\nPutting the models in a column in the models parameters dataframe (often a better solution).\n\n\n\n\n\n\n\nTip\n\n\n\nThis is a big modification, take some time to move build_model() to the R/models.R file, rewrite the code in the starting script and commit the changes in Gitnuro!"
  },
  {
    "objectID": "content/03_exercise_2.html#extract-models-results-with-map",
    "href": "content/03_exercise_2.html#extract-models-results-with-map",
    "title": "Hands-on Activity 2",
    "section": "Extract models results with map()",
    "text": "Extract models results with map()\nWe have seen how to use the map() function family to loop through columns of a dataframe and to create many models from a dataframe. Their use is not limited to that. It’s possible to extract the results of many models too.\nIn the starting-script.R, many line just print the summary of each model. A simple solution would be to replace them with the following code:\n\nmap(models, summary)\n\nThis will print the summary of all the models created at the previous steps. The inconvenient of the summary function is that it’s not easy to export as a table.\n\n\n\n\n\n\nExercice\n\n\n\nExercice: Create a function to extract estimates, CI, p-value and AIC from a model. Use map to apply it to every model.\nIt can be difficult to create a function from scratch, especially when working with lists. It’s sometimes easier to first work with one element of the list to test the function.\n\ntest_model &lt;- models[[1]]\n\nCheck the following functions to help you:\n\ncoef(summary(test_model))\n\n                   Estimate   Std. Error   t value     Pr(&gt;|t|)\n(Intercept)    1.8584448409 0.0321187539 57.861673 0.0000000000\ncreatinine    -0.0001666218 0.0001114468 -1.495079 0.1350492277\nage_screening  0.0012687634 0.0004504500  2.816658 0.0048995453\ngender2       -0.0618565055 0.0171497804 -3.606840 0.0003174377\n\nconfint(test_model)\n\nWaiting for profiling to be done...\n\n\n                      2.5 %        97.5 %\n(Intercept)    1.7954932401  1.921396e+00\ncreatinine    -0.0003850536  5.180995e-05\nage_screening  0.0003858977  2.151629e-03\ngender2       -0.0954694575 -2.824355e-02\n\ntest_model$aic\n\n[1] 1802.235\n\ncbind(confint(test_model), test_model$aic)\n\nWaiting for profiling to be done...\n\n\n                      2.5 %        97.5 %         \n(Intercept)    1.7954932401  1.921396e+00 1802.235\ncreatinine    -0.0003850536  5.180995e-05 1802.235\nage_screening  0.0003858977  2.151629e-03 1802.235\ngender2       -0.0954694575 -2.824355e-02 1802.235\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nextract_model_result &lt;- function(model) {\n  # Get coefficients\n  coefs &lt;- coef(summary(model)) |&gt;\n    as.data.frame()\n\n  # confidence interval\n  ci &lt;- confint(model) |&gt;\n    as.data.frame()\n\n  # AIC\n  aic &lt;- model$aic\n\n  # Return a dataframe\n  cbind(\n    coefs,\n    ci,\n    aic\n  ) |&gt;\n    # Get model variables in a column\n    rownames_to_column(var = \"term\")\n}\n\n# Test the function with one model\nextract_model_result(test_model)\n\n           term      Estimate   Std. Error   t value     Pr(&gt;|t|)         2.5 %\n1   (Intercept)  1.8584448409 0.0321187539 57.861673 0.0000000000  1.7954932401\n2    creatinine -0.0001666218 0.0001114468 -1.495079 0.1350492277 -0.0003850536\n3 age_screening  0.0012687634 0.0004504500  2.816658 0.0048995453  0.0003858977\n4       gender2 -0.0618565055 0.0171497804 -3.606840 0.0003174377 -0.0954694575\n         97.5 %      aic\n1  1.921396e+00 1802.235\n2  5.180995e-05 1802.235\n3  2.151629e-03 1802.235\n4 -2.824355e-02 1802.235\n\n# Extract all model results\nmodels_results &lt;- map(models, extract_model_result)\n\nThe broom: package is a very nice interface to reliably extract models results in a consistent way. The tidy() function can easily replace this custom-made function: https://broom.tidymodels.org/\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIt’s time to do another commit! Move extract_model_result() to the R/models.R file, rewrite the code in the starting script and commit the changes!"
  },
  {
    "objectID": "content/03_exercise_2.html#prepare-the-data",
    "href": "content/03_exercise_2.html#prepare-the-data",
    "title": "Hands-on Activity 2",
    "section": "Prepare the data",
    "text": "Prepare the data\nBefore creating a gt table, it’s best to have a clean table with only the information that we want to present. The first step is to clean the model parameters, models, and model results into one table.\n\n# Add models and results to the models_parameter dataframe\nresults &lt;- models_parameters |&gt;\n  dplyr::mutate(\n    models = models,\n    models_results = models_results\n  )\n\nThen we can unnest() the models_results column in the dataframe, and filter the terms from the model results to keep only the terms matching the exposure of the model.\n\nresults_short &lt;- results |&gt;\n  unnest(models_results) |&gt;\n  dplyr::filter(exposures == term) |&gt;\n  select(-models)\n\nhead(results_short)\n\n# A tibble: 6 × 10\n  outcomes   exposures term  Estimate `Std. Error` `t value` `Pr(&gt;|t|)`  `2.5 %`\n  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;    &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n1 asthma     creatini… crea… -1.67e-4    0.000111    -1.50        0.135 -3.85e-4\n2 asthma     lead      lead   2.38e-3    0.00555      0.429       0.668 -8.49e-3\n3 asthma     barium    bari… -3.03e-3    0.00212     -1.43        0.153 -7.18e-3\n4 asthma     cadmium   cadm…  1.20e-3    0.0183       0.0654      0.948 -3.47e-2\n5 heart_fai… creatini… crea… -2.77e-5    0.0000542   -0.511       0.609 -1.34e-4\n6 heart_fai… lead      lead  -2.68e-3    0.00255     -1.05        0.293 -7.67e-3\n# ℹ 2 more variables: `97.5 %` &lt;dbl&gt;, aic &lt;dbl&gt;\n\n\nNow the table is simpler. Let’s create a gt table and apply all the formating"
  },
  {
    "objectID": "content/03_exercise_2.html#create-the-gt-table",
    "href": "content/03_exercise_2.html#create-the-gt-table",
    "title": "Hands-on Activity 2",
    "section": "Create the gt table",
    "text": "Create the gt table\nTo create the table, follow these steps:\n\nInitialize the gt table object\n\n\nlibrary(gt)\ngt_table &lt;- gt(\n  data = results_short,\n  groupname_col = \"outcomes\"\n)\n\n\nFormat numbers\n\n\ngt_table &lt;- gt_table |&gt;\n  fmt_number(\n    columns = c(\"Estimate\", \"2.5 %\", \"97.5 %\"),\n    decimals = 3\n  ) |&gt;\n  fmt(\n    columns = \"Pr(&gt;|t|)\",\n    fns = function(x) format.pval(x, digits = 3)\n  )\n\n\nMerge and hide columns\n\n\ngt_table &lt;- gt_table |&gt;\n  # Merge confidence interval values together\n  cols_merge(\n    columns = c(\"2.5 %\", \"97.5 %\"),\n    pattern = \"{1} - {2}\"\n  ) |&gt;\n  # Hide non essential columns\n  cols_hide(\n    columns = c(\"Std. Error\", \"t value\", \"term\", \"aic\")\n  ) |&gt;\n  # Change column label\n  cols_label(\"2.5 %\" = \"95% CI\")\n\n\nAdd table title and subtitle\n\n\ngt_table &lt;- gt_table %&gt;%\n  tab_header(\n    title = \"Models results\",\n    subtitle = \"data = nh2007\"\n  )\n\ngt_table\n\n\n\n\n\n\n\nModels results\n\n\ndata = nh2007\n\n\nexposures\nEstimate\nPr(&gt;|t|)\n95% CI\n\n\n\n\nasthma\n\n\ncreatinine\n0.000\n0.13505\n0.000 - 0.000\n\n\nlead\n0.002\n0.66801\n−0.008 - 0.013\n\n\nbarium\n−0.003\n0.15283\n−0.007 - 0.001\n\n\ncadmium\n0.001\n0.94783\n−0.035 - 0.037\n\n\nheart_failure\n\n\ncreatinine\n0.000\n0.60937\n0.000 - 0.000\n\n\nlead\n−0.003\n0.29314\n−0.008 - 0.002\n\n\nbarium\n0.000\n0.61605\n−0.002 - 0.001\n\n\ncadmium\n0.002\n0.76814\n−0.014 - 0.019\n\n\ncoronary_heart_disease\n\n\ncreatinine\n0.000\n0.41578\n0.000 - 0.000\n\n\nlead\n−0.003\n0.24778\n−0.008 - 0.002\n\n\nbarium\n0.000\n0.69466\n−0.002 - 0.002\n\n\ncadmium\n0.014\n0.09495\n−0.003 - 0.031\n\n\nheart_attack\n\n\ncreatinine\n0.000\n0.92662\n0.000 - 0.000\n\n\nlead\n−0.003\n0.29655\n−0.009 - 0.003\n\n\nbarium\n−0.001\n0.35293\n−0.003 - 0.001\n\n\ncadmium\n0.026\n0.00538\n0.008 - 0.045\n\n\n\n\n\n\n\nAll these steps in the gt pipeline can be grouped into one function, for example, gt_models(), with only a results table as an argument. This means that you can easily reapply the function to new model results and get a identical table!\nExercice: Create this function, add it to R/gt_models.R and add a line to source the file in your maim script.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngt_models &lt;- function(results_clean) {\n  library(gt)\n  # 1. Initialize the gt table object\n  gt(\n    data = results_clean,\n    groupname_col = \"outcomes\"\n  ) |&gt;\n    # 2. Format numbers\n    fmt_number(\n      columns = c(\"Estimate\", \"2.5 %\", \"97.5 %\"),\n      decimals = 3\n    ) |&gt;\n    fmt(\n      columns = \"Pr(&gt;|t|)\",\n      fns = \\(x) format.pval(x, digits = 3)\n    ) |&gt;\n    # 3. Merge and hide columns\n    cols_merge(\n      columns = c(\"2.5 %\", \"97.5 %\"),\n      pattern = \"{1} - {2}\"\n    ) |&gt;\n    cols_hide(\n      columns = c(\"Std. Error\", \"t value\", \"term\", \"aic\")\n    ) |&gt;\n    cols_label(\"2.5 %\" = \"95% CI\") |&gt;\n    # 4. Add table title and subtitle\n    tab_header(\n      title = \"Models results\"\n  )\n}\n\n# Testing the function\ngt_models(results_short)\n\n\n\n\n\n\n\nModels results\n\n\nexposures\nEstimate\nPr(&gt;|t|)\n95% CI\n\n\n\n\nasthma\n\n\ncreatinine\n0.000\n0.13505\n0.000 - 0.000\n\n\nlead\n0.002\n0.66801\n−0.008 - 0.013\n\n\nbarium\n−0.003\n0.15283\n−0.007 - 0.001\n\n\ncadmium\n0.001\n0.94783\n−0.035 - 0.037\n\n\nheart_failure\n\n\ncreatinine\n0.000\n0.60937\n0.000 - 0.000\n\n\nlead\n−0.003\n0.29314\n−0.008 - 0.002\n\n\nbarium\n0.000\n0.61605\n−0.002 - 0.001\n\n\ncadmium\n0.002\n0.76814\n−0.014 - 0.019\n\n\ncoronary_heart_disease\n\n\ncreatinine\n0.000\n0.41578\n0.000 - 0.000\n\n\nlead\n−0.003\n0.24778\n−0.008 - 0.002\n\n\nbarium\n0.000\n0.69466\n−0.002 - 0.002\n\n\ncadmium\n0.014\n0.09495\n−0.003 - 0.031\n\n\nheart_attack\n\n\ncreatinine\n0.000\n0.92662\n0.000 - 0.000\n\n\nlead\n−0.003\n0.29655\n−0.009 - 0.003\n\n\nbarium\n−0.001\n0.35293\n−0.003 - 0.001\n\n\ncadmium\n0.026\n0.00538\n0.008 - 0.045\n\n\n\n\n\n\n\nRemember to commit the new changes."
  },
  {
    "objectID": "content/03_exercise_2.html#report",
    "href": "content/03_exercise_2.html#report",
    "title": "Hands-on Activity 2",
    "section": "2007 report",
    "text": "2007 report\nNow we can put the nice table in a Quarto document to generate directly HTML or DOCX documents.\nIn RStudio create a new file: qmd/report.qmd In the report we should include a yaml header defining some execution parameters:\n---\ntitle: \"NHANES Report\"\nauthor: \"Your Name\"\ndate: \"date\"\noutput: html_document # or docx\n---\nR code can then be executed within chunks. The first chunk should load all the packages and source all the functions:\n```{r}\n# Load packages\nlibrary(tidyverse)\nlibrary(here)\n\n# Loading the functions\n# here() gets the location of the project\nsource(here(\"R/descriptive.R\"))\nsource(here(\"R/models.R\"))\nsource(here(\"R/gt_models.R\"))\n\n# Alternative is to use .. to refer to the project root\n# source(\"../R/descriptive.R\")\n# source(\"../R/models.R\")\n# source(\"../R/gt_models.R\")\n# ..  refer to the project root (one folder above the current one)\n\n```\nIn between each chunk, you can add text to describe what you did, or even write some method points that you need to remember for later. The syntax in this part is done in markdown.\nThe following chunks can contain all the lines that include map functions.\n\n\n\n\n\n\nExcercie\n\n\n\nExercise: Convert your starting script into a Quarto document.\n\nCreate the file qmd/report.qmd\nOpen it and add the yaml header and a chunck to load all the package and library.\nAdd as many chuncks as you wish for each step of the analysis.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nYou can check the following file to see a example: report example"
  },
  {
    "objectID": "content/03_exercise_2.html#report-1",
    "href": "content/03_exercise_2.html#report-1",
    "title": "Hands-on Activity 2",
    "section": "2009 report",
    "text": "2009 report\nThis report is only based on the 2007 seven data. Since the 2009 data in the nh2009 dataset is very similar, we can re-use the functions with it. It’s very easy to replicate the analysis with new dataa: it only requires applying the same functions to the new dataset.\nLet’s create a new section in the report:\n# 2007\n\n... 2007 analysis\n\n# 2009\n... 2009 analysis\nThe script for the 2009 analysis can look like this:\n\nload(here(\"data/nh2009.RData\"))\n\n# Descriptive stats\npurrr::map(.x = nh2009, .f = compute_descriptive_stats) |&gt;\n  dplyr::bind_rows(.id = \"column\")\n\n# List outcomes\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\n\nmodels_parameters_2009 &lt;- tidyr::expand_grid(outcomes, exposures)\n\nmodels_2009 &lt;- map2(\n  .x = models_parameters_2009$outcomes,\n  .y = models_parameters_2009$exposures,\n  .f = \\(x, y) build_model(x, y, dataset = nh2009) # we need to change the dataset\n)\n\n# Extract model results\nmodels_results_2009 &lt;- map(models_2009, extract_model_result)\n\nresults_2009 &lt;- models_parameters_2009 |&gt;\n  dplyr::mutate(\n    models = models_2009,\n    models_results = models_results_2009\n  )\n\nresults_model_clean_2009 &lt;- results_2009 |&gt;\n  unnest(models_results) |&gt;\n  dplyr::filter(exposures == term) |&gt;\n  select(-models)\n\ngt_models(results_model_clean_2009)\n\nExercice: Intergrate the following lines in the report document, and render the document (Button in RStudio toolbar).\nCongratulation, you finished the whole workshop!\nYou can check the following files to see the final files of the project:\n\nreport_example.qmd which contains the code of the report. Click on “Render” in RStudio or type quarto render qmd/report_example.qmd in the terminal. The rendered report can be seen here: report example\nR/descriptive.R, R/models.R, and R/gt_models.R to see all the functions definitions"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Elevate your research with reproducibility science practices: a R workshop for young researcher in epidemiology",
    "section": "",
    "text": "This workshop aims to provide young epidemiology researchers knowledge and skills to increase reproducibility of their research.\nThe first part of the workshop will begin by defining reproducibility and its importance in epidemiology, exploring associated challenges and opportunities. In the second part of the workshop, focus will be put on practical solutions and their application so that young researchers can implement in their analysis and writing.\nThe workshop will be held on Zoom, link should have been send to you.\n\nGoals\n\nExplain what is a reproducibile analysis workflow\nShow how to improve the organisation of your R projects\nShow and apply simple tools to make your analysis code cleaner, shorter, documented and more reproducible\nIntroduce to Git to track changes in your code\n\n\n\nProgram\n\nIntroduction (20 minutes):\n\nWelcome\nImportance of reproducibility in epidemiology research\nThe principles of a reproducible workflow\n\nCreating and organizing a project structure for reproducibility\nAvoiding copy pasting with functions\nGit basic to keep track your code\n\n\nHands-on Activity 1: a simple reproducible project (40 minutes)\n\nHow to organize project’s filess\nStyle R scripts\nFirst Git commit\nIntroduction to creating your own functions\n\nBreak (15 minutes)\nHands-on Activity 2: create a nice report (50 minutes)\n\nFunctional programming wiht purrr\nCreate a nice report with quarto\nMake nice tables using gt\nBonus: Git branch and remote repo\n\nClosing Remarks and Q&A (15 minutes)\n\nSummary of key takeaways\nResources for further learning\nOpen floor for questions and discussion\n\n\n\n\nRequirements\nA computer with zoom and the following softwares installed:\n\nR (version R 4.3.0 or later)\nR-studio, version 2023.03 or later (other IDE like Visual code can also be used)\nquarto (version 1.3 or later)\ngit (version &gt;= 2.40.0)\nGitnuro, a GUI (graphic interface) to git\n\nAll the pre-workshop instructions can be found here: Pre-workshop.\n\n\nReferences\nThis workshop was created and heavily inspired by many amazing ressources from the R community. Here is the list of references and books that were use to create this workshop.\nBooks:\n\nR for Data Science (2e) by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund. https://r4ds.hadley.nz/\nAdvanced R by Hadley Wickham. https://adv-r.hadley.nz/index.html\nIntro Reproducible Research in R, An introductory workshop on modern data analyses and workflows by Luke W. Johnston, Helene Baek Juel, Bettina Lengger, Daniel R. Witte, Hannah Chatwin, Malene Revsbech Christiansen, Anders Aasted Isaksen. https://doi.org/10.21105/jose.00122, https://r-cubed-intro.rostools.org/\nIntermediate and Advanced Reproducible Research in R by Luke W. Johnston. https://r-cubed-intermediate.rostools.org/, https://r-cubed-advanced.rostools.org/\nThe carpentries. https://carpentries.org/\nWhat They Forgot to Teach You About R by Jennifer Bryan, Jim Hester, Shannon Pileggi, E. David Aja. https://rstats.wtf/\nHappy Git and GitHub for the useR by Jennyfer Bryan. https://happygitwithr.com/\n\nPackages:\n\ntidyverse: https://www.tidyverse.org/\nquarto: https://quarto.org/\ngt: https://gt.rstudio.com/\nhere: https://here.r-lib.org/\nbroom: https://broom.tidymodels.org/\n\nGit:\n\nPro Git book by Scott Chacon. https://git-scm.com/book/en/v2\nOh My git! https://ohmygit.org/\nLearn Git Branching https://learngitbranching.js.org\n\nDataset:\n\nNational Health and Nutrition Examination Survey (NHANES) from the CDC. https://www.cdc.gov/nchs/nhanes/index.htm\n\n\n\nRe-use and licensing\n\nThe course material is licensed under the Creative Commons Attribution 4.0 International License, so the material can be used, re-used, and modified, as long as there is attribution to this source.\n\n\nIssues and comments\nIn case you encounter any error or strugle with the workshop material, you can report an issue in the left side menu. Feel free to contact me by email too."
  }
]